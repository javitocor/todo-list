!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=4)}([function(e,t,n){var o=n(1),r=n(2);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var d={insert:"head",singleton:!1};o(r,d);e.exports=r.locals||{}},function(e,t,n){"use strict";var o,r=function(){return void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o},d=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),c=[];function i(e){for(var t=-1,n=0;n<c.length;n++)if(c[n].identifier===e){t=n;break}return t}function a(e,t){for(var n={},o=[],r=0;r<e.length;r++){var d=e[r],a=t.base?d[0]+t.base:d[0],s=n[a]||0,u="".concat(a," ").concat(s);n[a]=s+1;var l=i(u),m={css:d[1],media:d[2],sourceMap:d[3]};-1!==l?(c[l].references++,c[l].updater(m)):c.push({identifier:u,updater:g(m,t),references:1}),o.push(u)}return o}function s(e){var t=document.createElement("style"),o=e.attributes||{};if(void 0===o.nonce){var r=n.nc;r&&(o.nonce=r)}if(Object.keys(o).forEach((function(e){t.setAttribute(e,o[e])})),"function"==typeof e.insert)e.insert(t);else{var c=d(e.insert||"head");if(!c)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");c.appendChild(t)}return t}var u,l=(u=[],function(e,t){return u[e]=t,u.filter(Boolean).join("\n")});function m(e,t,n,o){var r=n?"":o.media?"@media ".concat(o.media," {").concat(o.css,"}"):o.css;if(e.styleSheet)e.styleSheet.cssText=l(t,r);else{var d=document.createTextNode(r),c=e.childNodes;c[t]&&e.removeChild(c[t]),c.length?e.insertBefore(d,c[t]):e.appendChild(d)}}function f(e,t,n){var o=n.css,r=n.media,d=n.sourceMap;if(r?e.setAttribute("media",r):e.removeAttribute("media"),d&&btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(d))))," */")),e.styleSheet)e.styleSheet.cssText=o;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(o))}}var p=null,y=0;function g(e,t){var n,o,r;if(t.singleton){var d=y++;n=p||(p=s(t)),o=m.bind(null,n,d,!1),r=m.bind(null,n,d,!0)}else n=s(t),o=f.bind(null,n,t),r=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return o(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;o(e=t)}else r()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=r());var n=a(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var o=0;o<n.length;o++){var r=i(n[o]);c[r].references--}for(var d=a(e,t),s=0;s<n.length;s++){var u=i(n[s]);0===c[u].references&&(c[u].updater(),c.splice(u,1))}n=d}}}},function(e,t,n){(t=n(3)(!1)).push([e.i,".project {\r\n  cursor: pointer;\r\n}\r\n\r\n#addTodoButton {\r\n  display: none;\r\n}\r\n",""]),e.exports=t},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",o=e[3];if(!o)return n;if(t&&"function"==typeof btoa){var r=(c=o,i=btoa(unescape(encodeURIComponent(JSON.stringify(c)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),"/*# ".concat(a," */")),d=o.sources.map((function(e){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(e," */")}));return[n].concat(d).concat([r]).join("\n")}var c,i,a;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,o){"string"==typeof e&&(e=[[null,e,""]]);var r={};if(o)for(var d=0;d<this.length;d++){var c=this[d][0];null!=c&&(r[c]=!0)}for(var i=0;i<e.length;i++){var a=[].concat(e[i]);o&&r[a[0]]||(n&&(a[2]?a[2]="".concat(n," and ").concat(a[2]):a[2]=n),t.push(a))}},t}},function(e,t,n){"use strict";n.r(t);const o=function(){const e=function(e,t){const n=document.createElement(e);return n.className=t,n},t=function(e,t,n){const o=document.createElement(e);return o.className=t,o.innerHTML=n,o};return{createElement:e,createElementWithInnerText:t,createCard:function(n,o){const{cardCN:r,bodyCN:d,footerCN:c,headerCN:i}=function(e){let t;switch(e){case"high":t={cardCN:"card border-danger mb-3",bodyCN:"card-body text-danger",footerCN:"card-footer bg-transparent border-danger",headerCN:"card-header text-danger"};break;case"medium":t={cardCN:"card border-primary mb-3",bodyCN:"card-body text-primary",footerCN:"card-footer bg-transparent border-primary",headerCN:"card-header text-primary"};break;default:t={cardCN:"card border-success mb-3",bodyCN:"card-body text-success",footerCN:"card-footer bg-transparent border-success",headerCN:"card-header text-success"}}return t}(n.priority),a=e("div",r);a.style="max-width: 18rem;";const s=t("div",i,n.title),u=e("div",d),l=t("h5","card-title",n.description),m=n.notes+" "+n.dueDate+" "+n.priority,f=t("p","card-text",m),p=e("footer",c),y=e("i","far fa-edit"),g=e("i","far fa-trash-alt");return p.appendChild(y),p.appendChild(g),a.appendChild(s),todoList.appendChild(a),u.appendChild(l),u.appendChild(f),a.appendChild(u),a.appendChild(p),{card:a,trashIcon:g,editIcon:y}}}},r=function(e,t=[]){return{name:e,pocket:t}},d=function(){function e(){let e;return null===window.localStorage.getItem("todolist")?(e=[],window.localStorage.setItem("todolist",JSON.stringify(e)),function(){const e=r("Default Project");d().addProject(e),console.log("Success"),document.getElementById("projectForm").reset(),location.reload()}()):e=JSON.parse(window.localStorage.getItem("todolist")),e}return{getStorage:e,addProject:function(t){const n=e();n.push(t),window.localStorage.setItem("todolist",JSON.stringify(n))},deleteProject:function(t){if(window.confirm("Do you want to remove that project?")){const n=e();n.splice(t,1),window.localStorage.setItem("todolist",JSON.stringify(n))}},addTodo:function(t,n){const o=e();o[t].pocket.push(n),window.localStorage.setItem("todolist",JSON.stringify(o))},deleteTodo:function(t,n){if(window.confirm("Do you want to remove that task?")){const o=e();o[t].pocket.splice(n,1),window.localStorage.setItem("todolist",JSON.stringify(o))}},updateTodo:function(t,n,o){if(window.confirm("Do you want to edit that task?")){const r=e();r[t].pocket[n]=o,window.localStorage.setItem("todolist",JSON.stringify(r))}}}},c=function(){function e(e){document.getElementById("todoList").innerHTML="",document.getElementById("addTodoButton").style.display="block";const t=document.getElementById("displayProjectName"),i=d().getStorage(),a=i[e].name;t.innerHTML=a+" ToDoÂ´s";document.getElementById("projectId").innerHTML=e;document.getElementById("todoList");i[e].pocket.forEach((t,i)=>{const{trashIcon:a,editIcon:s}=o().createCard(t,i);a.addEventListener("click",n.bind(this,e,i)),s.addEventListener("click",function(){function e(){const e=document.getElementById("titleTodo").value,t=document.getElementById("descriptionTodo").value,n=document.getElementById("notesTodo").value;return[e,t,document.getElementById("dueDateTodo").value,document.querySelector('input[name="priority"]:checked').value,n]}document.getElementById("submitProject").addEventListener("click",(function(){const e=document.getElementById("nameProject").value,t=d(),n=r(e);t.addProject(n),document.getElementById("closeModalButton1").click(),document.getElementById("projectForm").reset(),c().showProject()}));document.getElementById("submitTodo").addEventListener("click",(function(){const t=e(),n=function(e,t,n,o,r,d=!1){return{title:e,description:t,dueDate:n,priority:o,notes:r,checklist:d}}(t[0],t[1],t[2],t[3],t[4]),o=document.getElementById("projectId").innerHTML;d().addTodo(o,n),document.getElementById("closeModalButton").click(),document.getElementById("todoForm").reset(),c().showTodos(o)}));return document.getElementById("editTodo").addEventListener("click",function(){const t=document.getElementById("projectId").innerHTML,n=document.getElementById("todoId").innerHTML,o=e(),r={title:o[0],description:o[1],dueDate:o[2],priority:o[3],notes:o[4]};d().updateTodo(t,n,r),document.getElementById("todoId").innerHTML="";document.getElementById("closeModalButton").click(),document.getElementById("todoForm").reset(),c().showTodos(t)}.bind(this)),{showEditTodoProcedure:function(e,t){document.getElementById("addTodoButton").click(),c().showEditTodoButton(),document.getElementById("todoId").innerHTML=t;const n=d().getStorage()[e].pocket[t];document.getElementById("titleTodo").value=n.title,document.getElementById("descriptionTodo").value=n.description,document.getElementById("notesTodo").value=n.notes,document.getElementById("dueDateTodo").value=n.dueDate;const o=n.priority.toLowerCase()+"P";document.getElementsByClassName(o)[0].checked=!0}}}().showEditTodoProcedure.bind(this,e,i))})}const t=function(e){d().deleteProject(e),location.reload()};function n(t,n){d().deleteTodo(t,n),e(t)}return document.getElementById("addTodoButton").addEventListener("click",(function(){document.getElementById("submitTodo").style.display="block";document.getElementById("editTodo").style.display="none"})),{showProject:function(){const n=d().getStorage(),r=document.getElementById("projects");r.innerHTML="",n.forEach((n,d)=>{const{name:c}=n,i=o().createElement("li","project"),a=o().createElementWithInnerText("span","project",c),s=o().createElement("i","far fa-trash-alt");i.appendChild(a),i.appendChild(s),r.appendChild(i),a.addEventListener("click",e.bind(this,d)),s.addEventListener("click",t.bind(this,d))})},showEditTodoButton:function(){document.getElementById("submitTodo").style.display="none";document.getElementById("editTodo").style.display="block"},showTodos:e}};n(0);c().showProject()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,