!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=4)}([function(e,t,n){var o=n(1),r=n(2);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var i={insert:"head",singleton:!1};o(r,i);e.exports=r.locals||{}},function(e,t,n){"use strict";var o,r=function(){return void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o},i=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),c=[];function a(e){for(var t=-1,n=0;n<c.length;n++)if(c[n].identifier===e){t=n;break}return t}function d(e,t){for(var n={},o=[],r=0;r<e.length;r++){var i=e[r],d=t.base?i[0]+t.base:i[0],u=n[d]||0,l="".concat(d," ").concat(u);n[d]=u+1;var s=a(l),f={css:i[1],media:i[2],sourceMap:i[3]};-1!==s?(c[s].references++,c[s].updater(f)):c.push({identifier:l,updater:y(f,t),references:1}),o.push(l)}return o}function u(e){var t=document.createElement("style"),o=e.attributes||{};if(void 0===o.nonce){var r=n.nc;r&&(o.nonce=r)}if(Object.keys(o).forEach((function(e){t.setAttribute(e,o[e])})),"function"==typeof e.insert)e.insert(t);else{var c=i(e.insert||"head");if(!c)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");c.appendChild(t)}return t}var l,s=(l=[],function(e,t){return l[e]=t,l.filter(Boolean).join("\n")});function f(e,t,n,o){var r=n?"":o.media?"@media ".concat(o.media," {").concat(o.css,"}"):o.css;if(e.styleSheet)e.styleSheet.cssText=s(t,r);else{var i=document.createTextNode(r),c=e.childNodes;c[t]&&e.removeChild(c[t]),c.length?e.insertBefore(i,c[t]):e.appendChild(i)}}function p(e,t,n){var o=n.css,r=n.media,i=n.sourceMap;if(r?e.setAttribute("media",r):e.removeAttribute("media"),i&&btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=o;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(o))}}var m=null,v=0;function y(e,t){var n,o,r;if(t.singleton){var i=v++;n=m||(m=u(t)),o=f.bind(null,n,i,!1),r=f.bind(null,n,i,!0)}else n=u(t),o=p.bind(null,n,t),r=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return o(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;o(e=t)}else r()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=r());var n=d(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var o=0;o<n.length;o++){var r=a(n[o]);c[r].references--}for(var i=d(e,t),u=0;u<n.length;u++){var l=a(n[u]);0===c[l].references&&(c[l].updater(),c.splice(l,1))}n=i}}}},function(e,t,n){(t=n(3)(!1)).push([e.i,".project {\r\n  cursor: pointer;\r\n}\r\n\r\n#addTodoButton {\r\n  display: none;\r\n}\r\n",""]),e.exports=t},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",o=e[3];if(!o)return n;if(t&&"function"==typeof btoa){var r=(c=o,a=btoa(unescape(encodeURIComponent(JSON.stringify(c)))),d="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),"/*# ".concat(d," */")),i=o.sources.map((function(e){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([r]).join("\n")}var c,a,d;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,o){"string"==typeof e&&(e=[[null,e,""]]);var r={};if(o)for(var i=0;i<this.length;i++){var c=this[i][0];null!=c&&(r[c]=!0)}for(var a=0;a<e.length;a++){var d=[].concat(e[a]);o&&r[d[0]]||(n&&(d[2]?d[2]="".concat(n," and ").concat(d[2]):d[2]=n),t.push(d))}},t}},function(e,t,n){"use strict";n.r(t);const o=function(){function e(){let e;return null===window.localStorage.getItem("todolist")?(e=[],window.localStorage.setItem("todolist",JSON.stringify(e))):e=JSON.parse(window.localStorage.getItem("todolist")),e}return{getStorage:e,addProject:function(t){const n=e();n.push(t),window.localStorage.setItem("todolist",JSON.stringify(n))},deleteProject:function(t){if(window.confirm("Do you want to remove that project?")){const n=e();n.splice(t,1),window.localStorage.setItem("todolist",JSON.stringify(n))}},addTodo:function(t,n){const o=e();o[t].pocket.push(n),window.localStorage.setItem("todolist",JSON.stringify(o))},deleteTodo:function(t,n){if(window.confirm("Do you want to remove that task?")){const o=e();o[t].pocket.splice(n,1),window.localStorage.setItem("todolist",JSON.stringify(o))}}}};var r=function(e,t,n,o,r,i=!1){return{title:e,description:t,dueDate:n,priority:o,notes:r,checklist:i}};var i=function(e,t=[]){return{name:e,pocket:t}};const c=function(e,t){const n=document.createElement(e);return n.className=t,n},a=function(e,t,n){const o=document.createElement(e);return o.className=t,o.innerHTML=n,o};n(0);document.getElementById("submitProject").addEventListener("click",(function(){const e=document.getElementById("nameProject").value,t=o(),n=i(e);t.addProject(n),document.getElementById("closeModalButton1").click(),document.getElementById("projectForm").reset(),u()}));const d=function(e){o().deleteProject(e),location.reload()};function u(){const e=o().getStorage(),t=document.getElementById("projects");t.innerHTML="",e.forEach((e,n)=>{const{name:o}=e,r=c("li","project"),i=a("span","project",o),u=c("i","far fa-trash-alt");r.appendChild(i),r.appendChild(u),t.appendChild(r),i.addEventListener("click",l.bind(this,n)),u.addEventListener("click",d.bind(this,n))})}function l(e){document.getElementById("todoList").innerHTML="",document.getElementById("addTodoButton").style.display="block";const t=document.getElementById("displayProjectName"),n=o().getStorage(),r=n[e].name;t.innerHTML=r+" ToDoÂ´s";document.getElementById("projectId").innerHTML=e;const i=document.getElementById("todoList");n[e].pocket.forEach((t,n)=>{const o=c("div","card border-primary mb-3");o.style="max-width: 18rem;";const r=a("div","card-header",t.title),d=c("div","card-body text-primary"),u=a("h5","card-title",t.description),l=t.notes+" "+t.dueDate+" "+t.priority,f=a("p","card-text",l),p=c("footer","card-footer bg-transparent border-primary"),m=c("i","far fa-edit"),v=c("i","far fa-trash-alt");p.appendChild(m),p.appendChild(v),o.appendChild(r),i.appendChild(o),d.appendChild(u),d.appendChild(f),o.appendChild(d),o.appendChild(p),v.addEventListener("click",s.bind(this,e,n))})}function s(e,t){o().deleteTodo(e,t),l(e)}u();document.getElementById("submitTodo").addEventListener("click",(function(){const e=document.getElementById("titleTodo").value,t=document.getElementById("descriptionTodo").value,n=document.getElementById("notesTodo").value,i=document.getElementById("dueDateTodo").value,c=document.querySelector('input[name="priority"]:checked').value,a=document.getElementById("projectId").innerHTML,d=r(e,t,i,c,n);o().addTodo(a,d),document.getElementById("closeModalButton").click(),document.getElementById("todoForm").reset(),l(a)}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,